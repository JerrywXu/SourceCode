package java_basic;

/**
 * 位运算的运算规则
 * 位运算符&，二进制位都为1，结果为1，其他都为0
 * 位运算符|，二进制位只要有一个是1则为1，其他为0
 * 按位异或^ ,二进制只要不一样就为1，其他为0
 *
 * @author jerry
 * @Package java_basic
 * @date 2021/5/16 14:05
 */
public class BinaryOperator {
    public static void main(String[] args) {
        /*
        * 原码、反码、补码
        * 计算机在任何情况下存储的都是二进制的补码形式
        * 正数的原码、反码、补码是一样的
        * 负数的原码、反码、补码不同
        * 如
        * -7的原码：10000111
        * -7的反码：11111000
        * -7的补码：11111001
        *
        *
        *
        * */

        //18的二进制位 00010010
        //7的二进制位  00000111
        /*
        * 18  &  7
        *   00010010
        * & 00000111
        * ————————————————
        *   00000010     结果为2
        *
        *   00010010
        * | 00000111
        * ————————————————
        *   00010111     结果为23
        *
        *
        *
        *
        *    00010010
        * ^  00000111
        * ————————————————
        *    00010101     结果为21
        * */
        System.out.println(18 & 7);
        System.out.println(18 | 7);
        System.out.println(18 ^ 7);

        /*
        *
        *
        * 源码 反码 补码的计算步骤
        * 先通过二进制求原码，在求反码，接着求补码（反码+1）=====>只有负数才求这些东西
        * 正数的原码、反码（原码取反）、补码（反码+1）都一样
        *
        *https://www.jianshu.com/p/a1871351ae80/
        *
        *
        * 按位取反的计算步骤：
        * 正数取反：
            ~12
            12
            原码：0000 1100
            反码：0000 1100
            补码：0000 1100
            补码按位取反：
            ~(0000 1100)=1111 0011
            反码：1111 0010
            原码：1000 1101  (十进制：13)
            即 ~12=-13
        *
        *负数取反：
            ~-12
            -12
            原码：1000 1100
            反码：1111 0011
            补码：1111 0100

            补码按位取反：
            ~(1111 0100)=0000 1011
            原码：0000 1011  (十进制：11)
            即 ~- 12=11
        *
        *
        *按位取反技巧
            无论正负数，先对数值本身加1，再改变符号位

             12   符号位取反: 数值加1（12+1=13),   正变负， 即-13；
            -12   符号位取反: 数值加1（-12+1=-11), 负变正,  即11；
        *
        *
        *
        * */
        System.out.println(~12);

        System.out.println(2<<2);//2快速变成8，效率最高，左移两位2(被移动的数字)<<2(移动几位)

    }
}
